<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
        integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="/stylesheets/chatStyle.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.8.1/socket.io.js"
        integrity="sha512-8BHxHDLsOHx+flIrQ0DrZcea7MkHqRU5GbTHmbdzMRnAaoCIkZ97PqZcXJkKZckMMhqfoeaJE+DNUVuyoQsO3Q=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <style>
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url(../images/bgmac.jpg);
            background-repeat: no-repeat;
            background-position: center center;
            background-size: cover;
            /* z-index: 100; */
        }
    </style>
</head>

<body class="overflow-hidden">
    <div class="textContainer  bg-zinc-400/15 backdrop-blur-[11px] s h-full w-full ">
        <div class="flex headSection p-4 gap-3 h-[10%] items-center">
            <button onclick="window.history.back()"><i class="fa-solid fa-chevron-left text-white"></i></button>
            <img src="data:image/png;base64,<%= recieverUser.pfp %>"
                class="w-10 h-10 object-cover  rounded-full object-top" alt="">
            <p class='text-white'>
                <%= recieverUser.username %>
            </p>
            <i class="fa-solid fa-ellipsis ml-auto text-white"></i>
        </div>
        <div class="seperation w-full bg-zinc-600 h-px "></div>

        <div class="texts shadow-sm p-3 h-[80%]  relative w-full overflow-y-auto flex flex-col gap-1">






            <div class="noChats hidden absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
                No chats to show..</div>


        </div>


        <div class="h-[10%]  relative flex justify-self-center items-center w-full px-4">
            <form id="chat-form"
                class="flex w-full h-[45px] relative rounded-full items-center px-3 border border-zinc-600">
                <i class="fa-regular fa-face-smile text-white"></i>
                <input type="text"
                    class=" bg-transparent text-white h-[24px] resize-none flex items-center outline-none px-3 w-full"
                    name="text" id="text">
                <button
                    class="text-white text-xl bg-blue-600 absolute h-full px-4 rounded-r-full  right-0">send</button>
            </form>
        </div>
    </div>


    <script>
        var socket = io
        var sender_id = '<%=user._id %>'
        var reciever_id = '<%=reciever_id %>'

        var socket = io('/chat', {
            auth: {
                token: sender_id
            }
        });

        let text_Container = document.querySelector('.texts')
        let msgs
        let chat_form = document.querySelector('#chat-form')
        let textContainer = document.querySelector('.textContainer')
        let text = document.querySelector('#text')
        let noChat = document.querySelector('.noChats')
        var options

        text.focus()


        socket.emit('catchIds', { sender_id, reciever_id })

        socket.on('loadOldChats', (data) => {
            let chats = data

            if (chats.length > 0) {
                document.querySelector('.texts').innerHTML = ''
                let html = ''

                chats.forEach(e => {

                    if (e.senderId === sender_id) {
                        // html += `<h2 class="${className} w-full"><span class="${bg} inline-block text-[14px] max-w-[60%] text-left px-4 py-2 rounded-full">${e.message}</span></h2>`
                        html += `<h2 id='${e._id}-text' class="text-right relative realText w-full">
  <div class="wrapper">
    <span id='update-${e._id}' 
          class="bg-zinc-300 break-words shadow-lg z-1  group cursor-pointer relative inline-block text-[14px] max-w-[60%] text-left px-4 py-2 rounded-lg message">
      ${e.message}
    
    
        <!-- Dropdown Menu -->
        <div
        id="options-${e._id}"
        class="hidden absolute z-50 right-[102%] bg-zinc-300/40 backdrop-blur-3xl top-0 flex-col text-white rounded-lg w-48 py-4 shadow-lg options-container">
        
        <div class="text-sm text-left text-zinc-900 px-4 mb-4">Mon 00:02</div>

        <!-- Forward Button -->
        <button class="flex w-full items-center justify-start text-sm px-4 text-zinc-900 hover:bg-zinc-300/50 py-3">
            <span class="mr-2">‚úàÔ∏è</span> Forward
        </button>
        <div class="border-t border-gray-600"></div>

        <!-- Copy Button -->
        <button class="flex w-full items-center justify-start px-4 text-sm text-zinc-900 hover:bg-zinc-300/50 py-3">
            <span class="mr-2">üìã</span> Copy
        </button>
        <div class="border-t border-gray-600"></div>

        <!-- Edit Button -->
        <button
            id='${e._id}'
            class="flex editMessage w-full items-center justify-start px-4 text-sm text-zinc-900 hover:bg-zinc-300/50 py-3">
            <span class="mr-2">‚úíÔ∏è</span> Edit
        </button>
        <div class="border-t border-gray-600"></div>

        <!-- Unsend Button -->
        <button
            id='${e._id}'
            class="flex w-full items-center deleteMessage justify-start px-4 text-sm text-[red] hover:bg-zinc-300/50 py-3">
            <span class="mr-2">‚Ü©Ô∏è</span> Unsend
        </button>
        </div>
    </span>
  </div>
</h2>
`
                    } else {
                        html += `<h2 id='${e._id}-text' class="text-left w-full"><span id='update-${e._id}' class="border border-zinc-700 break-words inline-block text-[14px] max-w-[60%] text-left px-4 py-2 rounded-lg">${e.message}</span></h2>`
                    }

                })
                document.querySelector('.texts').innerHTML = html
                scrollChat()
                deleteMessage()
                editMessage()


                msgs = document.querySelectorAll('.message')
                let pressTimer
                let optionCont = document.querySelectorAll('.options-container')
                // let options
                console.log(msgs)
                msgs.forEach(elem => {
                    elem.addEventListener('touchstart', (e) => {
                        // optionCont.forEach(e => e.style.display = 'none')
                        const element = e.currentTarget
                        console.log('element', element)
                        // console.log('element-classes',element.classList)
                        const elementId = e.currentTarget.id.replace('update-', '');
                        elem.style.userSelect = 'none';
                        pressTimer = setTimeout(() => {
                            if (options) { options.style.display = 'none' }
                            options = document.querySelector(`#options-${elementId}`)
                            options.style.display = 'block'
                        }, 600);
                    })


                    elem.addEventListener("touchend", () => clearTimeout(pressTimer));
                    elem.addEventListener("touchcancel", () => clearTimeout(pressTimer));
                })




            } else {
                noChat.style.display = 'block'
            }
        })

        chat_form.addEventListener('submit', (e) => {
            e.preventDefault()

            if (text.value != '') {
                fetch('/save-chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        sender_id: sender_id,
                        reciever_id: reciever_id,
                        text: text.value,
                    }),
                }).then((data) => {
                    return data.json()
                }).then(resp => {
                    console.log(resp.chat)

                    if (resp.success) {
                        if (noChat) {
                            noChat.style.display = 'none'
                        }
                        let html = `<h2 id='${resp.chat._id}-text' class="text-right relative realText w-full">
  <div class="wrapper">
    <span id='update-${resp.chat._id}' 
          class="bg-zinc-300 break-words shadow-lg z-1  group cursor-pointer relative inline-block text-[14px] max-w-[60%] text-left px-4 py-2 rounded-lg message">
      ${resp.chat.message}
    
    
    <!-- Dropdown Menu -->
        <div
        id="options-${resp.chat._id}"
        class="hidden absolute z-50 right-[102%] bg-zinc-300/40 backdrop-blur-3xl top-0 flex-col text-white rounded-lg w-48 py-4 shadow-lg options-container">
        
        <div class="text-sm text-left text-zinc-900 px-4 mb-4">Mon 00:02</div>

        <!-- Forward Button -->
        <button class="flex w-full items-center justify-start text-sm px-4 text-zinc-900 hover:bg-zinc-300/50 py-3">
            <span class="mr-2">‚úàÔ∏è</span> Forward
        </button>
        <div class="border-t border-gray-600"></div>

        <!-- Copy Button -->
        <button class="flex w-full items-center justify-start px-4 text-sm text-zinc-900 hover:bg-zinc-300/50 py-3">
            <span class="mr-2">üìã</span> Copy
        </button>
        <div class="border-t border-gray-600"></div>

        <!-- Edit Button -->
        <button
            id='${resp.chat._id}'
            class="flex editMessage w-full items-center justify-start px-4 text-sm text-zinc-900 hover:bg-zinc-300/50 py-3">
            <span class="mr-2">‚úíÔ∏è</span> Edit
        </button>
        <div class="border-t border-gray-600"></div>

        <!-- Unsend Button -->
        <button
            id='${resp.chat._id}'
            class="flex items-center w-full deleteMessage justify-start px-4 text-sm text-[red] hover:bg-zinc-300/50 py-3">
            <span class="mr-2">‚Ü©Ô∏è</span> Unsend
        </button>
        </div>
    </span>
  </div>
</h2>
`
                        document.querySelector('.texts').innerHTML += html
                        text.value = ''
                        text.focus()

                        scrollChat()
                        deleteMessage()
                        editMessage()
                        socket.emit('newChat', resp.chat)
                    }

                })
            }

        })

        socket.on('loadChat', (data) => {
            console.log('fata', data)
            if (noChat) {
                noChat.style.display = 'none'
            }
            if (sender_id == data.recieverId && reciever_id == data.senderId) {
                let html = `<h2 id='${data._id}-text' class="text-left w-full"><span id='update-${data._id}' class="border border-zinc-700 inline-block text-[14px] max-w-[60%] text-left px-4 py-2 rounded-lg">${data.message}</span></h2>`
                document.querySelector('.texts').innerHTML += html
                scrollChat()
            }
        })

        function scrollChat() {
            setTimeout(function () {
                text_Container.scrollTop = text_Container.scrollHeight;
            }, 0);

        }

        socket.on('deletedMsgEvent', (id) => {
            document.getElementById(`${id}-text`).remove();
        })

        function deleteMessage() {
            let allMsg = document.querySelectorAll('.deleteMessage')
            allMsg.forEach((e) => {
                e.addEventListener('click', (e) => {
                    delete_id = e.target.id

                    fetch('/delete-chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            delete_id: delete_id
                        })
                    }).then(res => {
                        return res.json()
                    }).then(data => {
                        if (data.success) {
                            document.getElementById(`${delete_id}-text`).remove()
                            socket.emit('deleteMsg', delete_id)
                        } else {
                            alert('something went wrong')
                        }
                    })
                })
            })
        }

        function editMessage() {

            let allMsg = document.querySelectorAll('.editMessage')
            allMsg.forEach((e) => {
                e.addEventListener('click', (e) => {
                    options.style.display = 'none'
                    edit_id = e.target.id

                    fetch('/edit-chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            edit_id: edit_id
                        })
                    }).then(res => {
                        return res.json()
                    }).then(data => {
                        if (data.success) {
                            text.value = data.msg.message
                            text.focus()
                            chat_form.addEventListener('click', (e) => {
                                e.preventDefault()
                                fetch('/update-chat', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        text: text.value,
                                        id: data.msg._id
                                    })
                                }).then(res => {
                                    return res.json()
                                }).then(data => {
                                    let elem = document.getElementById(`update-${data._id}`)
                                    if (elem) {
                                        const textNode = Array.from(elem.childNodes).find(node => node.nodeType === Node.TEXT_NODE);
                                        textNode.textContent = data.message
                                        text.value = ''
                                        socket.emit('editMsg', { msg: data.message, id: data._id })
                                        location.reload()
                                    }


                                })
                            })
                        }
                    })
                })
            })
        }



        console.log(msgs)

        socket.on('editMsgEvent', (data) => {
            console.log(data)
            let elem = document.getElementById(`update-${data.id}`)
            elem.textContent = data.msg
        })
    </script>
</body>

</html>